const PSIZE: usize = 2048;
const PMASK: u32 = 2047;

const N2: f64 = 0.05481866495625118;
const N3: f64 = 0.2781926117527186;
const N4: f64 = 0.11127401889945551;

/// Implementation of OpenSimplex 2 Noise, the smooth variant ("SuperSimplex")
/// based on the most recent version available at the repository https://github.com/KdotJPG/OpenSimplex2
/// developed by KdotJPG, who originally released the OpenSimplex Noise under a Public Domain license.
///
/// This is a port of the Java / C# code from the linked repository.
///
pub struct OpenSimplexNoise {
    /// The seed to start rng from
    pub seed: i64,
    /// Array of unsigned short entries (1-dimensional?)
    perm: Vec<u16>,
    // Array of 2-dimensional float values (x, y)
    permGrad2: Vec<(f64, f64)>,
}

impl OpenSimplexNoise {
    /// Constructs a new instance based on the given seed
    pub fn new(seed: i64) -> Self {
        let mut perm = Vec::with_capacity(PSIZE);
        let mut permGrad2 = Vec::with_capacity(PSIZE);

        let mut source: Vec<u16> = Vec::with_capacity(PSIZE);
        for index in 0..PSIZE {
            source[index] = index as u16;
        }

        for i in (0..PSIZE).rev() {
            let seed = seed * 6364136223846793005 + 1442695040888963407;
            let mut r: i32 = (seed as i32 + 31) % (i as i32 + 1);
            if r < 0 {
                r += i as i32 + 1;
            }

            perm[i] = source[r as usize];
            source[r as usize] = source[i];
        }

        Self {
            seed,
            perm,
            permGrad2,
        }
    }

    /// 2D SuperSimplex noise, standard lattice orientation
    ///
    /// returns a noise value between -1..+1
    ///
    pub fn noise2(x: f64, y: f64) -> f64 {
        0.0
    }

    /// 2D SuperSimplex noise, with Y pointing down the main diagonal.
    /// Might be better for a 2D sandbox style game, where Y is vertical.
    /// Probably slightly less optimal for heightmaps or continent maps.
    ///
    /// returns a noise value between -1..+1
    ///
    pub fn noise2_x_before_y(x: f64, y: f64) -> f64 {
        0.0
    }

    /// 2D SuperSimplex noise base.
    /// Lookup table implementation inspired by DigitalShadow.
    ///
    /// It is based on the refactored implementation to improve performance,
    /// see https://gist.github.com/digitalshadow/134a3a02b67cecd72181.
    ///
    /// returns a value between -1..+1
    ///
    fn noise2_base(xs: f64, ys: f64) -> f64 {
        0.0
    }

    /// Looks up entry from gradient table and returns pair (x, y) floats
    fn gradients_2d(index: usize) -> (f64, f64) {
        (0.0, 0.0)
    }
}

struct LatticePoint2D {
    pub xsv: i32,
    pub ysv: i32,
    pub dx: f64,
    pub dy: f64,
}

impl LatticePoint2D {
    pub fn new(xsv: i32, ysv: i32) -> Self {
        let ssv = (xsv * ysv) as f64 * -0.211324865405187;
        Self {
            xsv,
            ysv,
            dx: -xsv as f64 - ssv,
            dy: -ysv as f64 - ssv,
        }
    }
}

struct LatticePoint3D {
    pub xrv: i32,
    pub yrv: i32,
    pub zrv: i32,
    pub dxr: f64,
    pub dyr: f64,
    pub dzr: f64,
    pub next_on_failure: Option<Box<LatticePoint3D>>,
    pub next_on_success: Option<Box<LatticePoint3D>>,
}

impl LatticePoint3D {
    pub fn new(xrv: i32, yrv: i32, zrv: i32, lattice: i32) -> Self {
        let dxr = -xrv as f64 + lattice as f64 * 0.5;
        let dyr = -yrv as f64 + lattice as f64 * 0.5;
        let dzr = -zrv as f64 + lattice as f64 * 0.5;
        let xrv = xrv + lattice * 1024;
        let yrv = yrv + lattice * 1024;
        let zrv = zrv + lattice * 1024;

        // TODO come back here, implement this
        Self {
            dxr,
            dyr,
            dzr,
            xrv,
            yrv,
            zrv,
            next_on_failure: None,
            next_on_success: None,
        }
    }
}

struct LatticePoint4D {
    pub xsv: i32,
    pub ysv: i32,
    pub zsv: i32,
    pub wsv: i32,
    pub dx: f64,
    pub dy: f64,
    pub dz: f64,
    pub dw: f64,
}

impl LatticePoint4D {
    pub fn new(xsv: i32, ysv: i32, zsv: i32, wsv: i32) -> Self {
        let xsv = xsv;
        let ysv = ysv;
        let zsv = zsv;
        let wsv = wsv;
        let ssv: f64 = (xsv + ysv + zsv + wsv) as f64 * -0.138196601125011;
        let dx = -xsv as f64 - ssv;
        let dy = -ysv as f64 - ssv;
        let dz = -zsv as f64 - ssv;
        let dw = -wsv as f64 - ssv;

        Self {
            xsv,
            ysv,
            zsv,
            wsv,
            dx,
            dy,
            dz,
            dw,
        }
    }
}


// For now this macro helps to initialize the gradients tables once for use.
// There is a RFC to introduce logic to initialize static variables via `once_cell`.
// For details on the progress, see the discussion https://github.com/rust-lang/rfcs/pull/2788
// Until then the [lazy_static](https://docs.rs/lazy_static/1.4.0/lazy_static/) crate is used to initialize
// the lookup tables similar to the Java static initializer.
//
lazy_static! {
    /// Gradients lookup table for 2 dimensions
    static ref GRADIENTS_2D: Vec<(f64, f64)> = {
        let mut grad2 = vec![
            (0.130526192220052,  0.99144486137381),
            (0.38268343236509,   0.923879532511287),
            (0.608761429008721,  0.793353340291235),
            (0.793353340291235,  0.608761429008721),
            (0.923879532511287,  0.38268343236509),
            (0.99144486137381,   0.130526192220051),
            (0.99144486137381,  -0.130526192220051),
            (0.923879532511287, -0.38268343236509),
            (0.793353340291235, -0.60876142900872),
            (0.608761429008721, -0.793353340291235),
            (0.38268343236509,  -0.923879532511287),
            (0.130526192220052, -0.99144486137381),
            (0.130526192220052, -0.99144486137381),
            (0.38268343236509,  -0.923879532511287),
            (0.608761429008721, -0.793353340291235),
            (0.793353340291235, -0.608761429008721),
            (0.923879532511287, -0.38268343236509),
            (0.99144486137381,  -0.130526192220052),
            (0.99144486137381,   0.130526192220051),
            (0.923879532511287,  0.38268343236509),
            (0.793353340291235,  0.608761429008721),
            (0.608761429008721,  0.793353340291235),
            (0.38268343236509,   0.923879532511287),
            (0.130526192220052,  0.99144486137381)
        ];

        for i in 0..grad2.len() {
            grad2[i].0 /= N2;
            grad2[i].1 /= N2;
        }

        let mut gradients = Vec::with_capacity(PSIZE);
        for i in 0..PSIZE {
            gradients.push(grad2[i % grad2.len()]);
        }
        gradients
    };

    /// Gradients lookup table for 3 dimensions
    static ref GRADIENTS_3D: Vec<(f64, f64, f64)> = {
        let mut grad3 = vec![
            (-2.22474487139,      -2.22474487139,      -1.0),
            (-2.22474487139,      -2.22474487139,       1.0),
            (-3.0862664687972017, -1.1721513422464978,  0.0),
            (-1.1721513422464978, -3.0862664687972017,  0.0),
            (-2.22474487139,      -1.0,                -2.22474487139),
            (-2.22474487139,       1.0,                -2.22474487139),
            (-1.1721513422464978,  0.0,                -3.0862664687972017),
            (-3.0862664687972017,  0.0,                -1.1721513422464978),
            (-2.22474487139,      -1.0,                 2.22474487139),
            (-2.22474487139,       1.0,                 2.22474487139),
            (-3.0862664687972017,  0.0,                 1.1721513422464978),
            (-1.1721513422464978,  0.0,                 3.0862664687972017),
            (-2.22474487139,       2.22474487139,      -1.0),
            (-2.22474487139,       2.22474487139,       1.0),
            (-1.1721513422464978,  3.0862664687972017,  0.0),
            (-3.0862664687972017,  1.1721513422464978,  0.0),
            (-1.0,                -2.22474487139,      -2.22474487139),
            ( 1.0,                -2.22474487139,      -2.22474487139),
            ( 0.0,                -3.0862664687972017, -1.1721513422464978),
            ( 0.0,                -1.1721513422464978, -3.0862664687972017),
            (-1.0,                -2.22474487139,       2.22474487139),
            ( 1.0,                -2.22474487139,       2.22474487139),
            ( 0.0,                -1.1721513422464978,  3.0862664687972017),
            ( 0.0,                -3.0862664687972017,  1.1721513422464978),
            (-1.0,                 2.22474487139,      -2.22474487139),
            ( 1.0,                 2.22474487139,      -2.22474487139),
            ( 0.0,                 1.1721513422464978, -3.0862664687972017),
            ( 0.0,                 3.0862664687972017, -1.1721513422464978),
            (-1.0,                 2.22474487139,       2.22474487139),
            ( 1.0,                 2.22474487139,       2.22474487139),
            ( 0.0,                 3.0862664687972017,  1.1721513422464978),
            ( 0.0,                 1.1721513422464978,  3.0862664687972017),
            ( 2.22474487139,      -2.22474487139,      -1.0),
            ( 2.22474487139,      -2.22474487139,       1.0),
            ( 1.1721513422464978, -3.0862664687972017,  0.0),
            ( 3.0862664687972017, -1.1721513422464978,  0.0),
            ( 2.22474487139,      -1.0,                -2.22474487139),
            ( 2.22474487139,       1.0,                -2.22474487139),
            ( 3.0862664687972017,  0.0,                -1.1721513422464978),
            ( 1.1721513422464978,  0.0,                -3.0862664687972017),
            ( 2.22474487139,      -1.0,                 2.22474487139),
            ( 2.22474487139,       1.0,                 2.22474487139),
            ( 1.1721513422464978,  0.0,                 3.0862664687972017),
            ( 3.0862664687972017,  0.0,                 1.1721513422464978),
            ( 2.22474487139,       2.22474487139,      -1.0),
            ( 2.22474487139,       2.22474487139,       1.0),
            ( 3.0862664687972017,  1.1721513422464978,  0.0),
            ( 1.1721513422464978,  3.0862664687972017,  0.0)
        ];

        for i in 0..grad3.len() {
            grad3[i].0 /= N3;
            grad3[i].1 /= N3;
            grad3[i].2 /= N3;
        }

        let mut gradients = Vec::with_capacity(PSIZE);
        for i in 0..PSIZE {
            gradients.push(grad3[i % grad3.len()]);
        }

        gradients
    };

    static ref GRADIENTS_4D: Vec<(f64, f64, f64, f64)> = {
        let mut grad4 = vec![
            (-0.753341017856078,    -0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624),
            (-0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301,    0.12128480194602098),
            (-0.7821684431180708,   -0.4321472685365301,    0.12128480194602098,  -0.4321472685365301),
            (-0.7821684431180708,    0.12128480194602098,  -0.4321472685365301,   -0.4321472685365301),
            (-0.8586508742123365,   -0.508629699630796,     0.044802370851755174,  0.044802370851755174),
            (-0.8586508742123365,    0.044802370851755174, -0.508629699630796,     0.044802370851755174),
            (-0.8586508742123365,    0.044802370851755174,  0.044802370851755174, -0.508629699630796),
            (-0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842),
            (-0.37968289875261624,  -0.753341017856078,    -0.37968289875261624,  -0.37968289875261624),
            (-0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301,    0.12128480194602098),
            (-0.4321472685365301,   -0.7821684431180708,    0.12128480194602098,  -0.4321472685365301),
            ( 0.12128480194602098,  -0.7821684431180708,   -0.4321472685365301,   -0.4321472685365301),
            (-0.508629699630796,    -0.8586508742123365,    0.044802370851755174,  0.044802370851755174),
            ( 0.044802370851755174, -0.8586508742123365,   -0.508629699630796,     0.044802370851755174),
            ( 0.044802370851755174, -0.8586508742123365,    0.044802370851755174, -0.508629699630796),
            (-0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842,  -0.03381941603233842),
            (-0.37968289875261624,  -0.37968289875261624,  -0.753341017856078,    -0.37968289875261624),
            (-0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708,    0.12128480194602098),
            (-0.4321472685365301,    0.12128480194602098,  -0.7821684431180708,   -0.4321472685365301),
            ( 0.12128480194602098,  -0.4321472685365301,   -0.7821684431180708,   -0.4321472685365301),
            (-0.508629699630796,     0.044802370851755174, -0.8586508742123365,    0.044802370851755174),
            ( 0.044802370851755174, -0.508629699630796,    -0.8586508742123365,    0.044802370851755174),
            ( 0.044802370851755174,  0.044802370851755174, -0.8586508742123365,   -0.508629699630796),
            (-0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062,   -0.03381941603233842),
            (-0.37968289875261624,  -0.37968289875261624,  -0.37968289875261624,  -0.753341017856078),
            (-0.4321472685365301,   -0.4321472685365301,    0.12128480194602098,  -0.7821684431180708),
            (-0.4321472685365301,    0.12128480194602098,  -0.4321472685365301,   -0.7821684431180708),
            ( 0.12128480194602098,  -0.4321472685365301,   -0.4321472685365301,   -0.7821684431180708),
            (-0.508629699630796,     0.044802370851755174,  0.044802370851755174, -0.8586508742123365),
            ( 0.044802370851755174, -0.508629699630796,     0.044802370851755174, -0.8586508742123365),
            ( 0.044802370851755174,  0.044802370851755174, -0.508629699630796,    -0.8586508742123365),
            (-0.03381941603233842,  -0.03381941603233842,  -0.03381941603233842,  -0.9982828964265062),
            (-0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537,    0.5794684678643381),
            (-0.7504883828755602,   -0.4004672082940195,    0.15296486218853164,   0.5029860367700724),
            (-0.7504883828755602,    0.15296486218853164,  -0.4004672082940195,    0.5029860367700724),
            (-0.8828161875373585,    0.08164729285680945,   0.08164729285680945,   0.4553054119602712),
            (-0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945,   0.8828161875373585),
            (-0.5029860367700724,   -0.15296486218853164,   0.4004672082940195,    0.7504883828755602),
            (-0.5029860367700724,    0.4004672082940195,   -0.15296486218853164,   0.7504883828755602),
            (-0.5794684678643381,    0.3239847771997537,    0.3239847771997537,    0.6740059517812944),
            (-0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537,    0.5794684678643381),
            (-0.4004672082940195,   -0.7504883828755602,    0.15296486218853164,   0.5029860367700724),
            ( 0.15296486218853164,  -0.7504883828755602,   -0.4004672082940195,    0.5029860367700724),
            ( 0.08164729285680945,  -0.8828161875373585,    0.08164729285680945,   0.4553054119602712),
            (-0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945,   0.8828161875373585),
            (-0.15296486218853164,  -0.5029860367700724,    0.4004672082940195,    0.7504883828755602),
            ( 0.4004672082940195,   -0.5029860367700724,   -0.15296486218853164,   0.7504883828755602),
            ( 0.3239847771997537,   -0.5794684678643381,    0.3239847771997537,    0.6740059517812944),
            (-0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944,    0.5794684678643381),
            (-0.4004672082940195,    0.15296486218853164,  -0.7504883828755602,    0.5029860367700724),
            ( 0.15296486218853164,  -0.4004672082940195,   -0.7504883828755602,    0.5029860367700724),
            ( 0.08164729285680945,   0.08164729285680945,  -0.8828161875373585,    0.4553054119602712),
            (-0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712,    0.8828161875373585),
            (-0.15296486218853164,   0.4004672082940195,   -0.5029860367700724,    0.7504883828755602),
            ( 0.4004672082940195,   -0.15296486218853164,  -0.5029860367700724,    0.7504883828755602),
            ( 0.3239847771997537,    0.3239847771997537,   -0.5794684678643381,    0.6740059517812944),
            (-0.6740059517812944,   -0.3239847771997537,    0.5794684678643381,   -0.3239847771997537),
            (-0.7504883828755602,   -0.4004672082940195,    0.5029860367700724,    0.15296486218853164),
            (-0.7504883828755602,    0.15296486218853164,   0.5029860367700724,   -0.4004672082940195),
            (-0.8828161875373585,    0.08164729285680945,   0.4553054119602712,    0.08164729285680945),
            (-0.4553054119602712,   -0.08164729285680945,   0.8828161875373585,   -0.08164729285680945),
            (-0.5029860367700724,   -0.15296486218853164,   0.7504883828755602,    0.4004672082940195),
            (-0.5029860367700724,    0.4004672082940195,    0.7504883828755602,   -0.15296486218853164),
            (-0.5794684678643381,    0.3239847771997537,    0.6740059517812944,    0.3239847771997537),
            (-0.3239847771997537,   -0.6740059517812944,    0.5794684678643381,   -0.3239847771997537),
            (-0.4004672082940195,   -0.7504883828755602,    0.5029860367700724,    0.15296486218853164),
            ( 0.15296486218853164,  -0.7504883828755602,    0.5029860367700724,   -0.4004672082940195),
            ( 0.08164729285680945,  -0.8828161875373585,    0.4553054119602712,    0.08164729285680945),
            (-0.08164729285680945,  -0.4553054119602712,    0.8828161875373585,   -0.08164729285680945),
            (-0.15296486218853164,  -0.5029860367700724,    0.7504883828755602,    0.4004672082940195),
            ( 0.4004672082940195,   -0.5029860367700724,    0.7504883828755602,   -0.15296486218853164),
            ( 0.3239847771997537,   -0.5794684678643381,    0.6740059517812944,    0.3239847771997537),
            (-0.3239847771997537,   -0.3239847771997537,    0.5794684678643381,   -0.6740059517812944),
            (-0.4004672082940195,    0.15296486218853164,   0.5029860367700724,   -0.7504883828755602),
            ( 0.15296486218853164,  -0.4004672082940195,    0.5029860367700724,   -0.7504883828755602),
            ( 0.08164729285680945,   0.08164729285680945,   0.4553054119602712,   -0.8828161875373585),
            (-0.08164729285680945,  -0.08164729285680945,   0.8828161875373585,   -0.4553054119602712),
            (-0.15296486218853164,   0.4004672082940195,    0.7504883828755602,   -0.5029860367700724),
            ( 0.4004672082940195,   -0.15296486218853164,   0.7504883828755602,   -0.5029860367700724),
            ( 0.3239847771997537,    0.3239847771997537,    0.6740059517812944,   -0.5794684678643381),
            (-0.6740059517812944,    0.5794684678643381,   -0.3239847771997537,   -0.3239847771997537),
            (-0.7504883828755602,    0.5029860367700724,   -0.4004672082940195,    0.15296486218853164),
            (-0.7504883828755602,    0.5029860367700724,    0.15296486218853164,  -0.4004672082940195),
            (-0.8828161875373585,    0.4553054119602712,    0.08164729285680945,   0.08164729285680945),
            (-0.4553054119602712,    0.8828161875373585,   -0.08164729285680945,  -0.08164729285680945),
            (-0.5029860367700724,    0.7504883828755602,   -0.15296486218853164,   0.4004672082940195),
            (-0.5029860367700724,    0.7504883828755602,    0.4004672082940195,   -0.15296486218853164),
            (-0.5794684678643381,    0.6740059517812944,    0.3239847771997537,    0.3239847771997537),
            (-0.3239847771997537,    0.5794684678643381,   -0.6740059517812944,   -0.3239847771997537),
            (-0.4004672082940195,    0.5029860367700724,   -0.7504883828755602,    0.15296486218853164),
            ( 0.15296486218853164,   0.5029860367700724,   -0.7504883828755602,   -0.4004672082940195),
            ( 0.08164729285680945,   0.4553054119602712,   -0.8828161875373585,    0.08164729285680945),
            (-0.08164729285680945,   0.8828161875373585,   -0.4553054119602712,   -0.08164729285680945),
            (-0.15296486218853164,   0.7504883828755602,   -0.5029860367700724,    0.4004672082940195),
            ( 0.4004672082940195,    0.7504883828755602,   -0.5029860367700724,   -0.15296486218853164),
            ( 0.3239847771997537,    0.6740059517812944,   -0.5794684678643381,    0.3239847771997537),
            (-0.3239847771997537,    0.5794684678643381,   -0.3239847771997537,   -0.6740059517812944),
            (-0.4004672082940195,    0.5029860367700724,    0.15296486218853164,  -0.7504883828755602),
            ( 0.15296486218853164,   0.5029860367700724,   -0.4004672082940195,   -0.7504883828755602),
            ( 0.08164729285680945,   0.4553054119602712,    0.08164729285680945,  -0.8828161875373585),
            (-0.08164729285680945,   0.8828161875373585,   -0.08164729285680945,  -0.4553054119602712),
            (-0.15296486218853164,   0.7504883828755602,    0.4004672082940195,   -0.5029860367700724),
            ( 0.4004672082940195,    0.7504883828755602,   -0.15296486218853164,  -0.5029860367700724),
            ( 0.3239847771997537,    0.6740059517812944,    0.3239847771997537,   -0.5794684678643381),
            ( 0.5794684678643381,   -0.6740059517812944,   -0.3239847771997537,   -0.3239847771997537),
            ( 0.5029860367700724,   -0.7504883828755602,   -0.4004672082940195,    0.15296486218853164),
            ( 0.5029860367700724,   -0.7504883828755602,    0.15296486218853164,  -0.4004672082940195),
            ( 0.4553054119602712,   -0.8828161875373585,    0.08164729285680945,   0.08164729285680945),
            ( 0.8828161875373585,   -0.4553054119602712,   -0.08164729285680945,  -0.08164729285680945),
            ( 0.7504883828755602,   -0.5029860367700724,   -0.15296486218853164,   0.4004672082940195),
            ( 0.7504883828755602,   -0.5029860367700724,    0.4004672082940195,   -0.15296486218853164),
            ( 0.6740059517812944,   -0.5794684678643381,    0.3239847771997537,    0.3239847771997537),
            ( 0.5794684678643381,   -0.3239847771997537,   -0.6740059517812944,   -0.3239847771997537),
            ( 0.5029860367700724,   -0.4004672082940195,   -0.7504883828755602,    0.15296486218853164),
            ( 0.5029860367700724,    0.15296486218853164,  -0.7504883828755602,   -0.4004672082940195),
            ( 0.4553054119602712,    0.08164729285680945,  -0.8828161875373585,    0.08164729285680945),
            ( 0.8828161875373585,   -0.08164729285680945,  -0.4553054119602712,   -0.08164729285680945),
            ( 0.7504883828755602,   -0.15296486218853164,  -0.5029860367700724,    0.4004672082940195),
            ( 0.7504883828755602,    0.4004672082940195,   -0.5029860367700724,   -0.15296486218853164),
            ( 0.6740059517812944,    0.3239847771997537,   -0.5794684678643381,    0.3239847771997537),
            ( 0.5794684678643381,   -0.3239847771997537,   -0.3239847771997537,   -0.6740059517812944),
            ( 0.5029860367700724,   -0.4004672082940195,    0.15296486218853164,  -0.7504883828755602),
            ( 0.5029860367700724,    0.15296486218853164,  -0.4004672082940195,   -0.7504883828755602),
            ( 0.4553054119602712,    0.08164729285680945,   0.08164729285680945,  -0.8828161875373585),
            ( 0.8828161875373585,   -0.08164729285680945,  -0.08164729285680945,  -0.4553054119602712),
            ( 0.7504883828755602,   -0.15296486218853164,   0.4004672082940195,   -0.5029860367700724),
            ( 0.7504883828755602,    0.4004672082940195,   -0.15296486218853164,  -0.5029860367700724),
            ( 0.6740059517812944,    0.3239847771997537,    0.3239847771997537,   -0.5794684678643381),
            ( 0.03381941603233842,   0.03381941603233842,   0.03381941603233842,   0.9982828964265062),
            (-0.044802370851755174, -0.044802370851755174,  0.508629699630796,     0.8586508742123365),
            (-0.044802370851755174,  0.508629699630796,    -0.044802370851755174,  0.8586508742123365),
            (-0.12128480194602098,   0.4321472685365301,    0.4321472685365301,    0.7821684431180708),
            ( 0.508629699630796,    -0.044802370851755174, -0.044802370851755174,  0.8586508742123365),
            ( 0.4321472685365301,   -0.12128480194602098,   0.4321472685365301,    0.7821684431180708),
            ( 0.4321472685365301,    0.4321472685365301,   -0.12128480194602098,   0.7821684431180708),
            ( 0.37968289875261624,   0.37968289875261624,   0.37968289875261624,   0.753341017856078),
            ( 0.03381941603233842,   0.03381941603233842,   0.9982828964265062,    0.03381941603233842),
            (-0.044802370851755174,  0.044802370851755174,  0.8586508742123365,    0.508629699630796),
            (-0.044802370851755174,  0.508629699630796,     0.8586508742123365,   -0.044802370851755174),
            (-0.12128480194602098,   0.4321472685365301,    0.7821684431180708,    0.4321472685365301),
            ( 0.508629699630796,    -0.044802370851755174,  0.8586508742123365,   -0.044802370851755174),
            ( 0.4321472685365301,   -0.12128480194602098,   0.7821684431180708,    0.4321472685365301),
            ( 0.4321472685365301,    0.4321472685365301,    0.7821684431180708,   -0.12128480194602098),
            ( 0.37968289875261624,   0.37968289875261624,   0.753341017856078,     0.37968289875261624),
            ( 0.03381941603233842,   0.9982828964265062,    0.03381941603233842,   0.03381941603233842),
            (-0.044802370851755174,  0.8586508742123365,   -0.044802370851755174,  0.508629699630796),
            (-0.044802370851755174,  0.8586508742123365,    0.508629699630796,    -0.044802370851755174),
            (-0.12128480194602098,   0.7821684431180708,    0.4321472685365301,    0.4321472685365301),
            ( 0.508629699630796,     0.8586508742123365,   -0.044802370851755174, -0.044802370851755174),
            ( 0.4321472685365301,    0.7821684431180708,   -0.12128480194602098,   0.4321472685365301),
            ( 0.4321472685365301,    0.7821684431180708,    0.4321472685365301,   -0.12128480194602098),
            ( 0.37968289875261624,   0.753341017856078,     0.37968289875261624,   0.37968289875261624),
            ( 0.9982828964265062,    0.03381941603233842,   0.03381941603233842,   0.03381941603233842),
            ( 0.8586508742123365,   -0.044802370851755174, -0.044802370851755174,  0.508629699630796),
            ( 0.8586508742123365,   -0.044802370851755174,  0.508629699630796,    -0.044802370851755174),
            ( 0.7821684431180708,   -0.12128480194602098,   0.4321472685365301,    0.4321472685365301),
            ( 0.8586508742123365,    0.508629699630796,    -0.044802370851755174, -0.044802370851755174),
            ( 0.7821684431180708,    0.4321472685365301,   -0.12128480194602098,   0.4321472685365301),
            ( 0.7821684431180708,    0.4321472685365301,    0.4321472685365301,   -0.12128480194602098),
            ( 0.753341017856078,     0.37968289875261624,   0.37968289875261624,   0.37968289875261624)
        ];

        for i in 0..grad4.len() {
            grad4[i].0 /= N4;
            grad4[i].1 /= N4;
            grad4[i].2 /= N4;
            grad4[i].3 /= N4;
        }

        let mut gradients = Vec::with_capacity(PSIZE);
        for i in 0..PSIZE {
            gradients.push(grad4[i % grad4.len()]);
        }

        gradients
    };
}
